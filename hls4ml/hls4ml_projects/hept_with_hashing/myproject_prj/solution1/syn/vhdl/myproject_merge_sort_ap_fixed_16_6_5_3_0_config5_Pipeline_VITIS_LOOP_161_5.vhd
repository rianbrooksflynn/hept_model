-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_merge_sort_ap_fixed_16_6_5_3_0_config5_Pipeline_VITIS_LOOP_161_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    temp_25 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_26 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_35 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_36 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_37 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_38 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_39 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_40 : IN STD_LOGIC_VECTOR (31 downto 0);
    k_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    j_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_18 : IN STD_LOGIC_VECTOR (31 downto 0);
    indices_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    indices_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    indices_3_load : IN STD_LOGIC_VECTOR (31 downto 0);
    indices_4_load : IN STD_LOGIC_VECTOR (31 downto 0);
    indices_5_load : IN STD_LOGIC_VECTOR (31 downto 0);
    indices_6_load : IN STD_LOGIC_VECTOR (31 downto 0);
    indices_7_load : IN STD_LOGIC_VECTOR (31 downto 0);
    k_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    k_4_out_ap_vld : OUT STD_LOGIC;
    temp_42_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_42_out_ap_vld : OUT STD_LOGIC;
    temp_43_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_43_out_ap_vld : OUT STD_LOGIC;
    temp_60_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_60_out_ap_vld : OUT STD_LOGIC;
    temp_61_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_61_out_ap_vld : OUT STD_LOGIC;
    temp_86_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_86_out_ap_vld : OUT STD_LOGIC;
    temp_111_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_111_out_ap_vld : OUT STD_LOGIC;
    temp_128_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_128_out_ap_vld : OUT STD_LOGIC;
    temp_129_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_129_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject_merge_sort_ap_fixed_16_6_5_3_0_config5_Pipeline_VITIS_LOOP_161_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln161_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_3_fu_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_3_fu_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal k_7_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_27_fu_106 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_64_fu_583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_28_fu_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_63_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_29_fu_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_62_fu_565_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_30_fu_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_61_fu_556_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_31_fu_122 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_60_fu_547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_32_fu_126 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_59_fu_538_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_33_fu_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_58_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_34_fu_134 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_57_fu_520_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal temp_56_fu_403_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_56_fu_403_p18 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_6_fu_393_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln163_2_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_1_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln163_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_4_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_3_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln163_1_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_5_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln163_3_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln163_2_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln163_4_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_6_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln163_5_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_56_fu_403_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_7_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_592_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal temp_56_fu_403_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_56_fu_403_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_56_fu_403_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_56_fu_403_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_56_fu_403_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_56_fu_403_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_56_fu_403_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_56_fu_403_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_sparsemux_17_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_17_3_32_1_1_U739 : component myproject_sparsemux_17_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        CASE6 => "110",
        din6_WIDTH => 32,
        CASE7 => "111",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => temp_18,
        din1 => indices_1_load,
        din2 => indices_2_load,
        din3 => indices_3_load,
        din4 => indices_4_load,
        din5 => indices_5_load,
        din6 => indices_6_load,
        din7 => indices_7_load,
        def => temp_56_fu_403_p17,
        sel => temp_56_fu_403_p18,
        dout => temp_56_fu_403_p19);

    flow_control_loop_pipe_sequential_init_U : component myproject_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    j_3_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_3_fu_98 <= j_1_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_3_fu_98 <= ap_const_lv32_1;
                end if;
            end if; 
        end if;
    end process;

    k_3_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_3_fu_102 <= k_2;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_3_fu_102 <= k_7_fu_435_p2;
                end if;
            end if; 
        end if;
    end process;

    temp_27_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_27_fu_106 <= temp_40;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_27_fu_106 <= temp_64_fu_583_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_28_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_28_fu_110 <= temp_39;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_28_fu_110 <= temp_63_fu_574_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_29_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_29_fu_114 <= temp_38;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_29_fu_114 <= temp_62_fu_565_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_30_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_30_fu_118 <= temp_37;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_30_fu_118 <= temp_61_fu_556_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_31_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_31_fu_122 <= temp_36;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_31_fu_122 <= temp_60_fu_547_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_32_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_32_fu_126 <= temp_35;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_32_fu_126 <= temp_59_fu_538_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_33_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_33_fu_130 <= temp_26;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_33_fu_130 <= temp_58_fu_529_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_34_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_34_fu_134 <= temp_25;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_34_fu_134 <= temp_57_fu_520_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln161_fu_602_p2)
    begin
        if (((icmp_ln161_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln161_fu_602_p2 <= "1" when (tmp_fu_592_p4 = ap_const_lv31_0) else "0";
    icmp_ln163_1_fu_448_p2 <= "1" when (trunc_ln147_6_fu_393_p1 = ap_const_lv3_1) else "0";
    icmp_ln163_2_fu_454_p2 <= "1" when (trunc_ln147_6_fu_393_p1 = ap_const_lv3_2) else "0";
    icmp_ln163_3_fu_460_p2 <= "1" when (trunc_ln147_6_fu_393_p1 = ap_const_lv3_3) else "0";
    icmp_ln163_4_fu_466_p2 <= "1" when (trunc_ln147_6_fu_393_p1 = ap_const_lv3_4) else "0";
    icmp_ln163_5_fu_472_p2 <= "1" when (trunc_ln147_6_fu_393_p1 = ap_const_lv3_5) else "0";
    icmp_ln163_6_fu_478_p2 <= "1" when (trunc_ln147_6_fu_393_p1 = ap_const_lv3_6) else "0";
    icmp_ln163_fu_442_p2 <= "1" when (trunc_ln147_6_fu_393_p1 = ap_const_lv3_0) else "0";
    j_7_fu_397_p2 <= std_logic_vector(unsigned(j_3_fu_98) + unsigned(ap_const_lv32_1));
    k_4_out <= std_logic_vector(unsigned(k_3_fu_102) + unsigned(ap_const_lv32_1));

    k_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln161_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln161_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            k_4_out_ap_vld <= ap_const_logic_1;
        else 
            k_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    k_7_fu_435_p2 <= std_logic_vector(unsigned(k_3_fu_102) + unsigned(ap_const_lv32_1));
    or_ln163_1_fu_490_p2 <= (or_ln163_fu_484_p2 or icmp_ln163_fu_442_p2);
    or_ln163_2_fu_496_p2 <= (icmp_ln163_4_fu_466_p2 or icmp_ln163_3_fu_460_p2);
    or_ln163_3_fu_502_p2 <= (or_ln163_1_fu_490_p2 or icmp_ln163_5_fu_472_p2);
    or_ln163_4_fu_508_p2 <= (or_ln163_3_fu_502_p2 or or_ln163_2_fu_496_p2);
    or_ln163_5_fu_514_p2 <= (or_ln163_4_fu_508_p2 or icmp_ln163_6_fu_478_p2);
    or_ln163_fu_484_p2 <= (icmp_ln163_2_fu_454_p2 or icmp_ln163_1_fu_448_p2);
    temp_111_out <= 
        temp_56_fu_403_p19 when (icmp_ln163_2_fu_454_p2(0) = '1') else 
        temp_29_fu_114;

    temp_111_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln161_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln161_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_111_out_ap_vld <= ap_const_logic_1;
        else 
            temp_111_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_128_out <= 
        temp_56_fu_403_p19 when (icmp_ln163_1_fu_448_p2(0) = '1') else 
        temp_28_fu_110;

    temp_128_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln161_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln161_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_128_out_ap_vld <= ap_const_logic_1;
        else 
            temp_128_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_129_out <= 
        temp_56_fu_403_p19 when (icmp_ln163_fu_442_p2(0) = '1') else 
        temp_27_fu_106;

    temp_129_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln161_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln161_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_129_out_ap_vld <= ap_const_logic_1;
        else 
            temp_129_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_42_out <= 
        temp_34_fu_134 when (or_ln163_5_fu_514_p2(0) = '1') else 
        temp_56_fu_403_p19;

    temp_42_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln161_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln161_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_42_out_ap_vld <= ap_const_logic_1;
        else 
            temp_42_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_43_out <= 
        temp_56_fu_403_p19 when (icmp_ln163_6_fu_478_p2(0) = '1') else 
        temp_33_fu_130;

    temp_43_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln161_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln161_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_43_out_ap_vld <= ap_const_logic_1;
        else 
            temp_43_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_56_fu_403_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    temp_56_fu_403_p18 <= j_3_fu_98(3 - 1 downto 0);
    temp_57_fu_520_p3 <= 
        temp_34_fu_134 when (or_ln163_5_fu_514_p2(0) = '1') else 
        temp_56_fu_403_p19;
    temp_58_fu_529_p3 <= 
        temp_56_fu_403_p19 when (icmp_ln163_6_fu_478_p2(0) = '1') else 
        temp_33_fu_130;
    temp_59_fu_538_p3 <= 
        temp_56_fu_403_p19 when (icmp_ln163_5_fu_472_p2(0) = '1') else 
        temp_32_fu_126;
    temp_60_fu_547_p3 <= 
        temp_56_fu_403_p19 when (icmp_ln163_4_fu_466_p2(0) = '1') else 
        temp_31_fu_122;
    temp_60_out <= 
        temp_56_fu_403_p19 when (icmp_ln163_5_fu_472_p2(0) = '1') else 
        temp_32_fu_126;

    temp_60_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln161_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln161_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_60_out_ap_vld <= ap_const_logic_1;
        else 
            temp_60_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_61_fu_556_p3 <= 
        temp_56_fu_403_p19 when (icmp_ln163_3_fu_460_p2(0) = '1') else 
        temp_30_fu_118;
    temp_61_out <= 
        temp_56_fu_403_p19 when (icmp_ln163_4_fu_466_p2(0) = '1') else 
        temp_31_fu_122;

    temp_61_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln161_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln161_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_61_out_ap_vld <= ap_const_logic_1;
        else 
            temp_61_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_62_fu_565_p3 <= 
        temp_56_fu_403_p19 when (icmp_ln163_2_fu_454_p2(0) = '1') else 
        temp_29_fu_114;
    temp_63_fu_574_p3 <= 
        temp_56_fu_403_p19 when (icmp_ln163_1_fu_448_p2(0) = '1') else 
        temp_28_fu_110;
    temp_64_fu_583_p3 <= 
        temp_56_fu_403_p19 when (icmp_ln163_fu_442_p2(0) = '1') else 
        temp_27_fu_106;
    temp_86_out <= 
        temp_56_fu_403_p19 when (icmp_ln163_3_fu_460_p2(0) = '1') else 
        temp_30_fu_118;

    temp_86_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln161_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln161_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_86_out_ap_vld <= ap_const_logic_1;
        else 
            temp_86_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_592_p4 <= j_7_fu_397_p2(31 downto 1);
    trunc_ln147_6_fu_393_p1 <= k_3_fu_102(3 - 1 downto 0);
end behav;
