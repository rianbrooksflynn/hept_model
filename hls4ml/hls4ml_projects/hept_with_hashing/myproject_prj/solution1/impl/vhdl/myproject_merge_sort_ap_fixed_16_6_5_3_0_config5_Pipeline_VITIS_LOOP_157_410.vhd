-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_merge_sort_ap_fixed_16_6_5_3_0_config5_Pipeline_VITIS_LOOP_157_410 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    temp_273_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_272_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_271_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_270_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_269_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_268_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_267_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_266_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    k_33_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    i_21_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_0413299 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_1414303 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_2415307 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_3416311 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_4417315 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_5418319 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_6419323 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_7420327 : IN STD_LOGIC_VECTOR (31 downto 0);
    k_35_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    k_35_out_ap_vld : OUT STD_LOGIC;
    temp_285_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_285_out_ap_vld : OUT STD_LOGIC;
    temp_286_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_286_out_ap_vld : OUT STD_LOGIC;
    temp_287_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_287_out_ap_vld : OUT STD_LOGIC;
    temp_288_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_288_out_ap_vld : OUT STD_LOGIC;
    temp_289_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_289_out_ap_vld : OUT STD_LOGIC;
    temp_290_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_290_out_ap_vld : OUT STD_LOGIC;
    temp_315_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_315_out_ap_vld : OUT STD_LOGIC;
    temp_332_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_332_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject_merge_sort_ap_fixed_16_6_5_3_0_config5_Pipeline_VITIS_LOOP_157_410 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln157_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_fu_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal k_13_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_fu_106 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_120_fu_583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_97_fu_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_119_fu_574_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_98_fu_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_118_fu_565_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_99_fu_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_117_fu_556_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_100_fu_122 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_116_fu_547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_101_fu_126 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_115_fu_538_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_102_fu_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_114_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_103_fu_134 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_113_fu_520_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal temp_112_fu_403_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_112_fu_403_p18 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln147_8_fu_393_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln159_2_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln159_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_4_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_3_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln159_1_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_5_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln159_3_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln159_2_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln159_4_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_6_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln159_5_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_112_fu_403_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_592_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal temp_112_fu_403_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_112_fu_403_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_112_fu_403_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_112_fu_403_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_112_fu_403_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_112_fu_403_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_112_fu_403_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_112_fu_403_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_sparsemux_17_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_17_3_32_1_1_U1250 : component myproject_sparsemux_17_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        CASE6 => "110",
        din6_WIDTH => 32,
        CASE7 => "111",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mux_case_0413299,
        din1 => mux_case_1414303,
        din2 => mux_case_2415307,
        din3 => mux_case_3416311,
        din4 => mux_case_4417315,
        din5 => mux_case_5418319,
        din6 => mux_case_6419323,
        din7 => mux_case_7420327,
        def => temp_112_fu_403_p17,
        sel => temp_112_fu_403_p18,
        dout => temp_112_fu_403_p19);

    flow_control_loop_pipe_sequential_init_U : component myproject_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_98 <= i_21_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_98 <= ap_const_lv32_1;
                end if;
            end if; 
        end if;
    end process;

    k_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_102 <= k_33_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_102 <= k_13_fu_435_p2;
                end if;
            end if; 
        end if;
    end process;

    temp_100_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_100_fu_122 <= temp_270_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_100_fu_122 <= temp_116_fu_547_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_101_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_101_fu_126 <= temp_271_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_101_fu_126 <= temp_115_fu_538_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_102_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_102_fu_130 <= temp_272_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_102_fu_130 <= temp_114_fu_529_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_103_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_103_fu_134 <= temp_273_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_103_fu_134 <= temp_113_fu_520_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_97_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_97_fu_110 <= temp_267_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_97_fu_110 <= temp_119_fu_574_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_98_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_98_fu_114 <= temp_268_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_98_fu_114 <= temp_118_fu_565_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_99_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_99_fu_118 <= temp_269_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_99_fu_118 <= temp_117_fu_556_p3;
                end if;
            end if; 
        end if;
    end process;

    temp_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_fu_106 <= temp_266_reload;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    temp_fu_106 <= temp_120_fu_583_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln157_fu_602_p2)
    begin
        if (((icmp_ln157_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_6_fu_397_p2 <= std_logic_vector(unsigned(i_fu_98) + unsigned(ap_const_lv32_1));
    icmp_ln157_fu_602_p2 <= "1" when (tmp_fu_592_p4 = ap_const_lv31_0) else "0";
    icmp_ln159_1_fu_448_p2 <= "1" when (trunc_ln147_8_fu_393_p1 = ap_const_lv3_1) else "0";
    icmp_ln159_2_fu_454_p2 <= "1" when (trunc_ln147_8_fu_393_p1 = ap_const_lv3_2) else "0";
    icmp_ln159_3_fu_460_p2 <= "1" when (trunc_ln147_8_fu_393_p1 = ap_const_lv3_3) else "0";
    icmp_ln159_4_fu_466_p2 <= "1" when (trunc_ln147_8_fu_393_p1 = ap_const_lv3_4) else "0";
    icmp_ln159_5_fu_472_p2 <= "1" when (trunc_ln147_8_fu_393_p1 = ap_const_lv3_5) else "0";
    icmp_ln159_6_fu_478_p2 <= "1" when (trunc_ln147_8_fu_393_p1 = ap_const_lv3_6) else "0";
    icmp_ln159_fu_442_p2 <= "1" when (trunc_ln147_8_fu_393_p1 = ap_const_lv3_0) else "0";
    k_13_fu_435_p2 <= std_logic_vector(unsigned(k_fu_102) + unsigned(ap_const_lv32_1));
    k_35_out <= std_logic_vector(unsigned(k_fu_102) + unsigned(ap_const_lv32_1));

    k_35_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            k_35_out_ap_vld <= ap_const_logic_1;
        else 
            k_35_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln159_1_fu_490_p2 <= (or_ln159_fu_484_p2 or icmp_ln159_fu_442_p2);
    or_ln159_2_fu_496_p2 <= (icmp_ln159_4_fu_466_p2 or icmp_ln159_3_fu_460_p2);
    or_ln159_3_fu_502_p2 <= (or_ln159_1_fu_490_p2 or icmp_ln159_5_fu_472_p2);
    or_ln159_4_fu_508_p2 <= (or_ln159_3_fu_502_p2 or or_ln159_2_fu_496_p2);
    or_ln159_5_fu_514_p2 <= (or_ln159_4_fu_508_p2 or icmp_ln159_6_fu_478_p2);
    or_ln159_fu_484_p2 <= (icmp_ln159_2_fu_454_p2 or icmp_ln159_1_fu_448_p2);
    temp_112_fu_403_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    temp_112_fu_403_p18 <= i_fu_98(3 - 1 downto 0);
    temp_113_fu_520_p3 <= 
        temp_103_fu_134 when (or_ln159_5_fu_514_p2(0) = '1') else 
        temp_112_fu_403_p19;
    temp_114_fu_529_p3 <= 
        temp_112_fu_403_p19 when (icmp_ln159_6_fu_478_p2(0) = '1') else 
        temp_102_fu_130;
    temp_115_fu_538_p3 <= 
        temp_112_fu_403_p19 when (icmp_ln159_5_fu_472_p2(0) = '1') else 
        temp_101_fu_126;
    temp_116_fu_547_p3 <= 
        temp_112_fu_403_p19 when (icmp_ln159_4_fu_466_p2(0) = '1') else 
        temp_100_fu_122;
    temp_117_fu_556_p3 <= 
        temp_112_fu_403_p19 when (icmp_ln159_3_fu_460_p2(0) = '1') else 
        temp_99_fu_118;
    temp_118_fu_565_p3 <= 
        temp_112_fu_403_p19 when (icmp_ln159_2_fu_454_p2(0) = '1') else 
        temp_98_fu_114;
    temp_119_fu_574_p3 <= 
        temp_112_fu_403_p19 when (icmp_ln159_1_fu_448_p2(0) = '1') else 
        temp_97_fu_110;
    temp_120_fu_583_p3 <= 
        temp_112_fu_403_p19 when (icmp_ln159_fu_442_p2(0) = '1') else 
        temp_fu_106;
    temp_285_out <= 
        temp_103_fu_134 when (or_ln159_5_fu_514_p2(0) = '1') else 
        temp_112_fu_403_p19;

    temp_285_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_285_out_ap_vld <= ap_const_logic_1;
        else 
            temp_285_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_286_out <= 
        temp_112_fu_403_p19 when (icmp_ln159_6_fu_478_p2(0) = '1') else 
        temp_102_fu_130;

    temp_286_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_286_out_ap_vld <= ap_const_logic_1;
        else 
            temp_286_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_287_out <= 
        temp_112_fu_403_p19 when (icmp_ln159_5_fu_472_p2(0) = '1') else 
        temp_101_fu_126;

    temp_287_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_287_out_ap_vld <= ap_const_logic_1;
        else 
            temp_287_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_288_out <= 
        temp_112_fu_403_p19 when (icmp_ln159_4_fu_466_p2(0) = '1') else 
        temp_100_fu_122;

    temp_288_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_288_out_ap_vld <= ap_const_logic_1;
        else 
            temp_288_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_289_out <= 
        temp_112_fu_403_p19 when (icmp_ln159_3_fu_460_p2(0) = '1') else 
        temp_99_fu_118;

    temp_289_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_289_out_ap_vld <= ap_const_logic_1;
        else 
            temp_289_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_290_out <= 
        temp_112_fu_403_p19 when (icmp_ln159_2_fu_454_p2(0) = '1') else 
        temp_98_fu_114;

    temp_290_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_290_out_ap_vld <= ap_const_logic_1;
        else 
            temp_290_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_315_out <= 
        temp_112_fu_403_p19 when (icmp_ln159_1_fu_448_p2(0) = '1') else 
        temp_97_fu_110;

    temp_315_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_315_out_ap_vld <= ap_const_logic_1;
        else 
            temp_315_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_332_out <= 
        temp_112_fu_403_p19 when (icmp_ln159_fu_442_p2(0) = '1') else 
        temp_fu_106;

    temp_332_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_602_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_332_out_ap_vld <= ap_const_logic_1;
        else 
            temp_332_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_592_p4 <= i_6_fu_397_p2(31 downto 1);
    trunc_ln147_8_fu_393_p1 <= k_fu_102(3 - 1 downto 0);
end behav;
