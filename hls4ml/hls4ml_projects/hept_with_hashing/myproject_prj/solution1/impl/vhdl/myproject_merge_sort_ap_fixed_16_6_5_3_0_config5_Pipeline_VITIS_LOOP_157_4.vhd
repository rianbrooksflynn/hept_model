-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_merge_sort_ap_fixed_16_6_5_3_0_config5_Pipeline_VITIS_LOOP_157_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    temp_69_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_68_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_67_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_66_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_65_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_64_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_63_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_62_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (1 downto 0);
    k_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_07711 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_17815 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_27919 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_77_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_77_out_ap_vld : OUT STD_LOGIC;
    temp_76_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_76_out_ap_vld : OUT STD_LOGIC;
    temp_75_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_75_out_ap_vld : OUT STD_LOGIC;
    temp_74_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_74_out_ap_vld : OUT STD_LOGIC;
    temp_73_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_73_out_ap_vld : OUT STD_LOGIC;
    temp_72_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_72_out_ap_vld : OUT STD_LOGIC;
    temp_71_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_71_out_ap_vld : OUT STD_LOGIC;
    temp_70_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_70_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject_merge_sort_ap_fixed_16_6_5_3_0_config5_Pipeline_VITIS_LOOP_157_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln157_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal k_8_fu_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal k_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_92 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln159_1_fu_328_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_70_fu_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_fu_334_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln147_fu_324_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_71_fu_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_72_fu_104 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_73_fu_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_74_fu_112 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_75_fu_116 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_76_fu_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_77_fu_124 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal temp_fu_334_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_252 : BOOLEAN;
    signal ap_condition_255 : BOOLEAN;
    signal ap_condition_258 : BOOLEAN;
    signal ap_condition_261 : BOOLEAN;
    signal ap_condition_264 : BOOLEAN;
    signal ap_condition_267 : BOOLEAN;
    signal ap_condition_270 : BOOLEAN;
    signal ap_condition_273 : BOOLEAN;
    signal temp_fu_334_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_fu_334_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_fu_334_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_sparsemux_7_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_7_2_32_1_1_U850 : component myproject_sparsemux_7_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => mux_case_07711,
        din1 => mux_case_17815,
        din2 => mux_case_27919,
        def => temp_fu_334_p7,
        sel => i_fu_92,
        dout => temp_fu_334_p9);

    flow_control_loop_pipe_sequential_init_U : component myproject_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_92 <= empty;
                elsif (((icmp_ln157_fu_315_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_92 <= add_ln159_1_fu_328_p2;
                end if;
            end if; 
        end if;
    end process;

    k_8_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_8_fu_88 <= k_6_reload;
                elsif (((icmp_ln157_fu_315_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_8_fu_88 <= k_fu_351_p2;
                end if;
            end if; 
        end if;
    end process;

    temp_70_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_70_fu_96 <= temp_62_reload;
                elsif ((ap_const_boolean_1 = ap_condition_252)) then 
                    temp_70_fu_96 <= temp_fu_334_p9;
                end if;
            end if; 
        end if;
    end process;

    temp_71_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_71_fu_100 <= temp_63_reload;
                elsif ((ap_const_boolean_1 = ap_condition_255)) then 
                    temp_71_fu_100 <= temp_fu_334_p9;
                end if;
            end if; 
        end if;
    end process;

    temp_72_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_72_fu_104 <= temp_64_reload;
                elsif ((ap_const_boolean_1 = ap_condition_258)) then 
                    temp_72_fu_104 <= temp_fu_334_p9;
                end if;
            end if; 
        end if;
    end process;

    temp_73_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_73_fu_108 <= temp_65_reload;
                elsif ((ap_const_boolean_1 = ap_condition_261)) then 
                    temp_73_fu_108 <= temp_fu_334_p9;
                end if;
            end if; 
        end if;
    end process;

    temp_74_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_74_fu_112 <= temp_66_reload;
                elsif ((ap_const_boolean_1 = ap_condition_264)) then 
                    temp_74_fu_112 <= temp_fu_334_p9;
                end if;
            end if; 
        end if;
    end process;

    temp_75_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_75_fu_116 <= temp_67_reload;
                elsif ((ap_const_boolean_1 = ap_condition_267)) then 
                    temp_75_fu_116 <= temp_fu_334_p9;
                end if;
            end if; 
        end if;
    end process;

    temp_76_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_76_fu_120 <= temp_68_reload;
                elsif ((ap_const_boolean_1 = ap_condition_270)) then 
                    temp_76_fu_120 <= temp_fu_334_p9;
                end if;
            end if; 
        end if;
    end process;

    temp_77_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_77_fu_124 <= temp_69_reload;
                elsif ((ap_const_boolean_1 = ap_condition_273)) then 
                    temp_77_fu_124 <= temp_fu_334_p9;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln159_1_fu_328_p2 <= std_logic_vector(unsigned(i_fu_92) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_252_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln157_fu_315_p2, trunc_ln147_fu_324_p1)
    begin
                ap_condition_252 <= ((icmp_ln157_fu_315_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_fu_324_p1 = ap_const_lv3_0));
    end process;


    ap_condition_255_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln157_fu_315_p2, trunc_ln147_fu_324_p1)
    begin
                ap_condition_255 <= ((icmp_ln157_fu_315_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_fu_324_p1 = ap_const_lv3_1));
    end process;


    ap_condition_258_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln157_fu_315_p2, trunc_ln147_fu_324_p1)
    begin
                ap_condition_258 <= ((icmp_ln157_fu_315_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_fu_324_p1 = ap_const_lv3_2));
    end process;


    ap_condition_261_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln157_fu_315_p2, trunc_ln147_fu_324_p1)
    begin
                ap_condition_261 <= ((icmp_ln157_fu_315_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_fu_324_p1 = ap_const_lv3_3));
    end process;


    ap_condition_264_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln157_fu_315_p2, trunc_ln147_fu_324_p1)
    begin
                ap_condition_264 <= ((icmp_ln157_fu_315_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_fu_324_p1 = ap_const_lv3_4));
    end process;


    ap_condition_267_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln157_fu_315_p2, trunc_ln147_fu_324_p1)
    begin
                ap_condition_267 <= ((icmp_ln157_fu_315_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_fu_324_p1 = ap_const_lv3_5));
    end process;


    ap_condition_270_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln157_fu_315_p2, trunc_ln147_fu_324_p1)
    begin
                ap_condition_270 <= ((icmp_ln157_fu_315_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_fu_324_p1 = ap_const_lv3_6));
    end process;


    ap_condition_273_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln157_fu_315_p2, trunc_ln147_fu_324_p1)
    begin
                ap_condition_273 <= ((icmp_ln157_fu_315_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_fu_324_p1 = ap_const_lv3_7));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln157_fu_315_p2)
    begin
        if (((icmp_ln157_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln157_fu_315_p2 <= "1" when (i_fu_92 = ap_const_lv2_3) else "0";
    k_fu_351_p2 <= std_logic_vector(unsigned(k_8_fu_88) + unsigned(ap_const_lv32_1));
    temp_70_out <= temp_70_fu_96;

    temp_70_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_315_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_70_out_ap_vld <= ap_const_logic_1;
        else 
            temp_70_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_71_out <= temp_71_fu_100;

    temp_71_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_315_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_71_out_ap_vld <= ap_const_logic_1;
        else 
            temp_71_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_72_out <= temp_72_fu_104;

    temp_72_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_315_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_72_out_ap_vld <= ap_const_logic_1;
        else 
            temp_72_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_73_out <= temp_73_fu_108;

    temp_73_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_315_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_73_out_ap_vld <= ap_const_logic_1;
        else 
            temp_73_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_74_out <= temp_74_fu_112;

    temp_74_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_315_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_74_out_ap_vld <= ap_const_logic_1;
        else 
            temp_74_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_75_out <= temp_75_fu_116;

    temp_75_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_315_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_75_out_ap_vld <= ap_const_logic_1;
        else 
            temp_75_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_76_out <= temp_76_fu_120;

    temp_76_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_315_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_76_out_ap_vld <= ap_const_logic_1;
        else 
            temp_76_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_77_out <= temp_77_fu_124;

    temp_77_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln157_fu_315_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln157_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_77_out_ap_vld <= ap_const_logic_1;
        else 
            temp_77_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_fu_334_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    trunc_ln147_fu_324_p1 <= k_8_fu_88(3 - 1 downto 0);
end behav;
