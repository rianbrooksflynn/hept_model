-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_merge_sort_ap_fixed_16_6_5_3_0_config5_Pipeline_VITIS_LOOP_161_58 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    temp_221 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_220 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_219 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_218 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_217 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_216 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_215 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_214 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln161_1 : IN STD_LOGIC_VECTOR (2 downto 0);
    k_27 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_0301203 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_1302207 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_2303211 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_3304215 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_4305219 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_5306223 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_6307227 : IN STD_LOGIC_VECTOR (31 downto 0);
    mux_case_7308231 : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_238_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_238_out_ap_vld : OUT STD_LOGIC;
    temp_237_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_237_out_ap_vld : OUT STD_LOGIC;
    temp_236_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_236_out_ap_vld : OUT STD_LOGIC;
    temp_235_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_235_out_ap_vld : OUT STD_LOGIC;
    temp_234_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_234_out_ap_vld : OUT STD_LOGIC;
    temp_233_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_233_out_ap_vld : OUT STD_LOGIC;
    temp_232_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_232_out_ap_vld : OUT STD_LOGIC;
    temp_231_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    temp_231_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject_merge_sort_ap_fixed_16_6_5_3_0_config5_Pipeline_VITIS_LOOP_161_58 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_359_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal k_fu_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal k_1_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_102 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln163_fu_378_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln161_1_cast_fu_302_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_fu_106 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_8_fu_384_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln147_1_fu_374_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_1_fu_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_2_fu_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_3_fu_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_4_fu_122 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_5_fu_126 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_6_fu_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_7_fu_134 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal temp_8_fu_384_p17 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_8_fu_384_p18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_282 : BOOLEAN;
    signal ap_condition_285 : BOOLEAN;
    signal ap_condition_288 : BOOLEAN;
    signal ap_condition_291 : BOOLEAN;
    signal ap_condition_294 : BOOLEAN;
    signal ap_condition_297 : BOOLEAN;
    signal ap_condition_300 : BOOLEAN;
    signal ap_condition_303 : BOOLEAN;
    signal temp_8_fu_384_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_8_fu_384_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_8_fu_384_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_8_fu_384_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_8_fu_384_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_8_fu_384_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_8_fu_384_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_8_fu_384_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component myproject_sparsemux_17_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_17_3_32_1_1_U1141 : component myproject_sparsemux_17_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        CASE6 => "110",
        din6_WIDTH => 32,
        CASE7 => "111",
        din7_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => mux_case_0301203,
        din1 => mux_case_1302207,
        din2 => mux_case_2303211,
        din3 => mux_case_3304215,
        din4 => mux_case_4305219,
        din5 => mux_case_5306223,
        din6 => mux_case_6307227,
        din7 => mux_case_7308231,
        def => temp_8_fu_384_p17,
        sel => temp_8_fu_384_p18,
        dout => temp_8_fu_384_p19);

    flow_control_loop_pipe_sequential_init_U : component myproject_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    j_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_102 <= zext_ln161_1_cast_fu_302_p1;
                elsif (((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_102 <= add_ln163_fu_378_p2;
                end if;
            end if; 
        end if;
    end process;

    k_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_98 <= k_27;
                elsif (((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_98 <= k_1_fu_416_p2;
                end if;
            end if; 
        end if;
    end process;

    temp_1_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_1_fu_110 <= temp_215;
                elsif ((ap_const_boolean_1 = ap_condition_282)) then 
                    temp_1_fu_110 <= temp_8_fu_384_p19;
                end if;
            end if; 
        end if;
    end process;

    temp_2_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_2_fu_114 <= temp_216;
                elsif ((ap_const_boolean_1 = ap_condition_285)) then 
                    temp_2_fu_114 <= temp_8_fu_384_p19;
                end if;
            end if; 
        end if;
    end process;

    temp_3_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_3_fu_118 <= temp_217;
                elsif ((ap_const_boolean_1 = ap_condition_288)) then 
                    temp_3_fu_118 <= temp_8_fu_384_p19;
                end if;
            end if; 
        end if;
    end process;

    temp_4_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_4_fu_122 <= temp_218;
                elsif ((ap_const_boolean_1 = ap_condition_291)) then 
                    temp_4_fu_122 <= temp_8_fu_384_p19;
                end if;
            end if; 
        end if;
    end process;

    temp_5_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_5_fu_126 <= temp_219;
                elsif ((ap_const_boolean_1 = ap_condition_294)) then 
                    temp_5_fu_126 <= temp_8_fu_384_p19;
                end if;
            end if; 
        end if;
    end process;

    temp_6_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_6_fu_130 <= temp_220;
                elsif ((ap_const_boolean_1 = ap_condition_297)) then 
                    temp_6_fu_130 <= temp_8_fu_384_p19;
                end if;
            end if; 
        end if;
    end process;

    temp_7_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_7_fu_134 <= temp_221;
                elsif ((ap_const_boolean_1 = ap_condition_300)) then 
                    temp_7_fu_134 <= temp_8_fu_384_p19;
                end if;
            end if; 
        end if;
    end process;

    temp_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_fu_106 <= temp_214;
                elsif ((ap_const_boolean_1 = ap_condition_303)) then 
                    temp_fu_106 <= temp_8_fu_384_p19;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln163_fu_378_p2 <= std_logic_vector(unsigned(j_fu_102) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_282_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_fu_359_p3, trunc_ln147_1_fu_374_p1)
    begin
                ap_condition_282 <= ((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_1_fu_374_p1 = ap_const_lv3_1));
    end process;


    ap_condition_285_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_fu_359_p3, trunc_ln147_1_fu_374_p1)
    begin
                ap_condition_285 <= ((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_1_fu_374_p1 = ap_const_lv3_2));
    end process;


    ap_condition_288_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_fu_359_p3, trunc_ln147_1_fu_374_p1)
    begin
                ap_condition_288 <= ((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_1_fu_374_p1 = ap_const_lv3_3));
    end process;


    ap_condition_291_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_fu_359_p3, trunc_ln147_1_fu_374_p1)
    begin
                ap_condition_291 <= ((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_1_fu_374_p1 = ap_const_lv3_4));
    end process;


    ap_condition_294_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_fu_359_p3, trunc_ln147_1_fu_374_p1)
    begin
                ap_condition_294 <= ((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_1_fu_374_p1 = ap_const_lv3_5));
    end process;


    ap_condition_297_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_fu_359_p3, trunc_ln147_1_fu_374_p1)
    begin
                ap_condition_297 <= ((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_1_fu_374_p1 = ap_const_lv3_6));
    end process;


    ap_condition_300_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_fu_359_p3, trunc_ln147_1_fu_374_p1)
    begin
                ap_condition_300 <= ((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_1_fu_374_p1 = ap_const_lv3_7));
    end process;


    ap_condition_303_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_fu_359_p3, trunc_ln147_1_fu_374_p1)
    begin
                ap_condition_303 <= ((tmp_fu_359_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln147_1_fu_374_p1 = ap_const_lv3_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, tmp_fu_359_p3)
    begin
        if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    k_1_fu_416_p2 <= std_logic_vector(unsigned(k_fu_98) + unsigned(ap_const_lv32_1));
    temp_231_out <= temp_fu_106;

    temp_231_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_359_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_231_out_ap_vld <= ap_const_logic_1;
        else 
            temp_231_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_232_out <= temp_1_fu_110;

    temp_232_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_359_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_232_out_ap_vld <= ap_const_logic_1;
        else 
            temp_232_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_233_out <= temp_2_fu_114;

    temp_233_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_359_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_233_out_ap_vld <= ap_const_logic_1;
        else 
            temp_233_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_234_out <= temp_3_fu_118;

    temp_234_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_359_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_234_out_ap_vld <= ap_const_logic_1;
        else 
            temp_234_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_235_out <= temp_4_fu_122;

    temp_235_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_359_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_235_out_ap_vld <= ap_const_logic_1;
        else 
            temp_235_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_236_out <= temp_5_fu_126;

    temp_236_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_359_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_236_out_ap_vld <= ap_const_logic_1;
        else 
            temp_236_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_237_out <= temp_6_fu_130;

    temp_237_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_359_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_237_out_ap_vld <= ap_const_logic_1;
        else 
            temp_237_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_238_out <= temp_7_fu_134;

    temp_238_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_fu_359_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_fu_359_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_238_out_ap_vld <= ap_const_logic_1;
        else 
            temp_238_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_8_fu_384_p17 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    temp_8_fu_384_p18 <= j_fu_102(3 - 1 downto 0);
    tmp_fu_359_p3 <= j_fu_102(3 downto 3);
    trunc_ln147_1_fu_374_p1 <= k_fu_98(3 - 1 downto 0);
    zext_ln161_1_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln161_1),4));
end behav;
