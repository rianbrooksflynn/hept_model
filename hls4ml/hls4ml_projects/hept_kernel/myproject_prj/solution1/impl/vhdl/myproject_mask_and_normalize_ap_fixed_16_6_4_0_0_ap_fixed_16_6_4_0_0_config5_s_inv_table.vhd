-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_mask_and_normalize_ap_fixed_16_6_4_0_0_ap_fixed_16_6_4_0_0_config5_s_inv_table_rom is 
    generic(
             DWIDTH     : integer := 11; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of myproject_mask_and_normalize_ap_fixed_16_6_4_0_0_ap_fixed_16_6_4_0_0_config5_s_inv_table_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10000000000", 1 => "01110001110", 2 => "01100110011", 
    3 => "01011101000", 4 => "01010101010", 5 => "01001110110", 
    6 => "01001001001", 7 => "01000100010", 8 => "01000000000", 
    9 => "00111100001", 10 => "00111000111", 11 => "00110101111", 
    12 => "00110011001", 13 => "00110000110", 14 => "00101110100", 
    15 => "00101100100", 16 => "00101010101", 17 => "00101000111", 
    18 => "00100111011", 19 => "00100101111", 20 => "00100100100", 
    21 => "00100011010", 22 => "00100010001", 23 => "00100001000", 
    24 => "00100000000", 25 => "00011111000", 26 => "00011110000", 
    27 => "00011101010", 28 => "00011100011", 29 => "00011011101", 
    30 => "00011010111", 31 => "00011010010", 32 => "00011001100", 
    33 => "00011000111", 34 => "00011000011", 35 => "00010111110", 
    36 => "00010111010", 37 => "00010110110", 38 => "00010110010", 
    39 => "00010101110", 40 => "00010101010", 41 => "00010100111", 
    42 => "00010100011", 43 => "00010100000", 44 => "00010011101", 
    45 => "00010011010", 46 => "00010010111", 47 => "00010010100", 
    48 => "00010010010", 49 => "00010001111", 50 => "00010001101", 
    51 => "00010001010", 52 => "00010001000", 53 => "00010000110", 
    54 => "00010000100", 55 => "00010000010", 56 => "00010000000", 
    57 => "00001111110", 58 => "00001111100", 59 => "00001111010", 
    60 => "00001111000", 61 => "00001110110", 62 => "00001110101", 
    63 => "00001110011", 64 => "00001110001", 65 => "00001110000", 
    66 => "00001101110", 67 => "00001101101", 68 => "00001101011", 
    69 => "00001101010", 70 => "00001101001", 71 => "00001100111", 
    72 => "00001100110", 73 => "00001100101", 74 => "00001100011", 
    75 => "00001100010", 76 => "00001100001", 77 => "00001100000", 
    78 => "00001011111", 79 => "00001011110", 80 => "00001011101", 
    81 => "00001011100", 82 => "00001011011", 83 => "00001011010", 
    84 => "00001011001", 85 => "00001011000", 86 => "00001010111", 
    87 => "00001010110", 88 => "00001010101", 89 => "00001010100", 
    90 => "00001010011", 91 => "00001010010", 92 to 93=> "00001010001", 
    94 => "00001010000", 95 => "00001001111", 96 to 97=> "00001001110", 
    98 => "00001001101", 99 => "00001001100", 100 to 101=> "00001001011", 
    102 => "00001001010", 103 to 104=> "00001001001", 105 => "00001001000", 
    106 to 107=> "00001000111", 108 to 109=> "00001000110", 110 => "00001000101", 
    111 to 112=> "00001000100", 113 to 114=> "00001000011", 115 to 116=> "00001000010", 
    117 to 118=> "00001000001", 119 to 120=> "00001000000", 121 to 122=> "00000111111", 
    123 to 124=> "00000111110", 125 to 126=> "00000111101", 127 to 128=> "00000111100", 
    129 to 130=> "00000111011", 131 to 133=> "00000111010", 134 to 135=> "00000111001", 
    136 to 138=> "00000111000", 139 to 140=> "00000110111", 141 to 143=> "00000110110", 
    144 to 146=> "00000110101", 147 to 149=> "00000110100", 150 to 152=> "00000110011", 
    153 to 155=> "00000110010", 156 to 159=> "00000110001", 160 to 162=> "00000110000", 
    163 to 166=> "00000101111", 167 to 170=> "00000101110", 171 to 174=> "00000101101", 
    175 to 178=> "00000101100", 179 to 182=> "00000101011", 183 to 187=> "00000101010", 
    188 to 191=> "00000101001", 192 to 196=> "00000101000", 197 to 202=> "00000100111", 
    203 to 207=> "00000100110", 208 to 213=> "00000100101", 214 to 219=> "00000100100", 
    220 to 226=> "00000100011", 227 to 232=> "00000100010", 233 to 240=> "00000100001", 
    241 to 248=> "00000100000", 249 to 256=> "00000011111", 257 to 265=> "00000011110", 
    266 to 274=> "00000011101", 275 to 284=> "00000011100", 285 to 295=> "00000011011", 
    296 to 307=> "00000011010", 308 to 319=> "00000011001", 320 to 333=> "00000011000", 
    334 to 348=> "00000010111", 349 to 364=> "00000010110", 365 to 382=> "00000010101", 
    383 to 401=> "00000010100", 402 to 423=> "00000010011", 424 to 447=> "00000010010", 
    448 to 473=> "00000010001", 474 to 504=> "00000010000", 505 to 538=> "00000001111", 
    539 to 577=> "00000001110", 578 to 622=> "00000001101", 623 to 674=> "00000001100", 
    675 to 736=> "00000001011", 737 to 811=> "00000001010", 812 to 902=> "00000001001", 
    903 to 1016=> "00000001000", 1017 to 1023=> "00000000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity myproject_mask_and_normalize_ap_fixed_16_6_4_0_0_ap_fixed_16_6_4_0_0_config5_s_inv_table is
    generic (
        DataWidth : INTEGER := 11;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of myproject_mask_and_normalize_ap_fixed_16_6_4_0_0_ap_fixed_16_6_4_0_0_config5_s_inv_table is
    component myproject_mask_and_normalize_ap_fixed_16_6_4_0_0_ap_fixed_16_6_4_0_0_config5_s_inv_table_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    myproject_mask_and_normalize_ap_fixed_16_6_4_0_0_ap_fixed_16_6_4_0_0_config5_s_inv_table_rom_U :  component myproject_mask_and_normalize_ap_fixed_16_6_4_0_0_ap_fixed_16_6_4_0_0_config5_s_inv_table_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


