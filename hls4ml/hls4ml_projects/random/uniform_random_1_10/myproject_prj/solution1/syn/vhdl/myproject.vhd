-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_0_ap_vld : IN STD_LOGIC;
    x_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_1_ap_vld : IN STD_LOGIC;
    x_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_2_ap_vld : IN STD_LOGIC;
    x_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_3_ap_vld : IN STD_LOGIC;
    x_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_4_ap_vld : IN STD_LOGIC;
    x_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_5_ap_vld : IN STD_LOGIC;
    x_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_6_ap_vld : IN STD_LOGIC;
    x_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_7_ap_vld : IN STD_LOGIC;
    x_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_8_ap_vld : IN STD_LOGIC;
    x_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_9_ap_vld : IN STD_LOGIC;
    x_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_10_ap_vld : IN STD_LOGIC;
    x_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_11_ap_vld : IN STD_LOGIC;
    x_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_12_ap_vld : IN STD_LOGIC;
    x_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_13_ap_vld : IN STD_LOGIC;
    x_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_14_ap_vld : IN STD_LOGIC;
    x_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_15_ap_vld : IN STD_LOGIC;
    x_16 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_16_ap_vld : IN STD_LOGIC;
    x_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_17_ap_vld : IN STD_LOGIC;
    x_18 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_18_ap_vld : IN STD_LOGIC;
    x_19 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_19_ap_vld : IN STD_LOGIC;
    x_20 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_20_ap_vld : IN STD_LOGIC;
    x_21 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_21_ap_vld : IN STD_LOGIC;
    x_22 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_22_ap_vld : IN STD_LOGIC;
    x_23 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_23_ap_vld : IN STD_LOGIC;
    x_24 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_24_ap_vld : IN STD_LOGIC;
    x_25 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_25_ap_vld : IN STD_LOGIC;
    x_26 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_26_ap_vld : IN STD_LOGIC;
    x_27 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_27_ap_vld : IN STD_LOGIC;
    x_28 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_28_ap_vld : IN STD_LOGIC;
    x_29 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_29_ap_vld : IN STD_LOGIC;
    x_30 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_30_ap_vld : IN STD_LOGIC;
    x_31 : IN STD_LOGIC_VECTOR (15 downto 0);
    x_31_ap_vld : IN STD_LOGIC;
    layer2_out_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_0_ap_vld : OUT STD_LOGIC;
    layer2_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_1_ap_vld : OUT STD_LOGIC;
    layer2_out_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_2_ap_vld : OUT STD_LOGIC;
    layer2_out_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_3_ap_vld : OUT STD_LOGIC;
    layer2_out_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_4_ap_vld : OUT STD_LOGIC;
    layer2_out_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_5_ap_vld : OUT STD_LOGIC;
    layer2_out_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_6_ap_vld : OUT STD_LOGIC;
    layer2_out_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_7_ap_vld : OUT STD_LOGIC;
    layer2_out_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_8_ap_vld : OUT STD_LOGIC;
    layer2_out_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_out_9_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_myproject,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu13p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.785000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=171,HLS_SYN_LUT=592,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv16_3117 : STD_LOGIC_VECTOR (15 downto 0) := "0011000100010111";
    constant ap_const_lv16_78BC : STD_LOGIC_VECTOR (15 downto 0) := "0111100010111100";
    constant ap_const_lv16_150D : STD_LOGIC_VECTOR (15 downto 0) := "0001010100001101";
    constant ap_const_lv16_F7A0 : STD_LOGIC_VECTOR (15 downto 0) := "1111011110100000";
    constant ap_const_lv16_F15D : STD_LOGIC_VECTOR (15 downto 0) := "1111000101011101";
    constant ap_const_lv16_80F9 : STD_LOGIC_VECTOR (15 downto 0) := "1000000011111001";
    constant ap_const_lv16_C696 : STD_LOGIC_VECTOR (15 downto 0) := "1100011010010110";
    constant ap_const_lv16_45B6 : STD_LOGIC_VECTOR (15 downto 0) := "0100010110110110";
    constant ap_const_lv16_EA35 : STD_LOGIC_VECTOR (15 downto 0) := "1110101000110101";
    constant ap_const_lv16_2BB5 : STD_LOGIC_VECTOR (15 downto 0) := "0010101110110101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_0_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_0_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal x_0_ap_vld_preg : STD_LOGIC := '0';
    signal x_0_ap_vld_in_sig : STD_LOGIC;
    signal x_1_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_1_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal x_1_ap_vld_preg : STD_LOGIC := '0';
    signal x_1_ap_vld_in_sig : STD_LOGIC;
    signal x_2_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_2_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal x_2_ap_vld_preg : STD_LOGIC := '0';
    signal x_2_ap_vld_in_sig : STD_LOGIC;
    signal x_3_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_3_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal x_3_ap_vld_preg : STD_LOGIC := '0';
    signal x_3_ap_vld_in_sig : STD_LOGIC;
    signal x_4_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_4_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal x_4_ap_vld_preg : STD_LOGIC := '0';
    signal x_4_ap_vld_in_sig : STD_LOGIC;
    signal x_5_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_5_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal x_5_ap_vld_preg : STD_LOGIC := '0';
    signal x_5_ap_vld_in_sig : STD_LOGIC;
    signal x_6_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_6_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal x_6_ap_vld_preg : STD_LOGIC := '0';
    signal x_6_ap_vld_in_sig : STD_LOGIC;
    signal x_7_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_7_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal x_7_ap_vld_preg : STD_LOGIC := '0';
    signal x_7_ap_vld_in_sig : STD_LOGIC;
    signal x_8_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_8_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal x_8_ap_vld_preg : STD_LOGIC := '0';
    signal x_8_ap_vld_in_sig : STD_LOGIC;
    signal x_9_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x_9_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal x_9_ap_vld_preg : STD_LOGIC := '0';
    signal x_9_ap_vld_in_sig : STD_LOGIC;
    signal x_0_blk_n : STD_LOGIC;
    signal x_1_blk_n : STD_LOGIC;
    signal x_2_blk_n : STD_LOGIC;
    signal x_3_blk_n : STD_LOGIC;
    signal x_4_blk_n : STD_LOGIC;
    signal x_5_blk_n : STD_LOGIC;
    signal x_6_blk_n : STD_LOGIC;
    signal x_7_blk_n : STD_LOGIC;
    signal x_8_blk_n : STD_LOGIC;
    signal x_9_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal shl_ln91_fu_258_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln91_1_fu_271_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln91_2_fu_284_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln91_3_fu_297_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln91_4_fu_310_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln91_5_fu_323_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln91_6_fu_336_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln91_7_fu_349_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln91_8_fu_362_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln91_9_fu_375_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_0_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_0_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_0_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_0_ap_vld = ap_const_logic_1))) then 
                    x_0_ap_vld_preg <= x_0_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_0_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_0_ap_vld = ap_const_logic_1))) then 
                    x_0_preg <= x_0;
                end if; 
            end if;
        end if;
    end process;


    x_1_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_1_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_1_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_1_ap_vld = ap_const_logic_1))) then 
                    x_1_ap_vld_preg <= x_1_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_1_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_1_ap_vld = ap_const_logic_1))) then 
                    x_1_preg <= x_1;
                end if; 
            end if;
        end if;
    end process;


    x_2_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_2_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_2_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_2_ap_vld = ap_const_logic_1))) then 
                    x_2_ap_vld_preg <= x_2_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_2_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_2_ap_vld = ap_const_logic_1))) then 
                    x_2_preg <= x_2;
                end if; 
            end if;
        end if;
    end process;


    x_3_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_3_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_3_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_3_ap_vld = ap_const_logic_1))) then 
                    x_3_ap_vld_preg <= x_3_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_3_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_3_ap_vld = ap_const_logic_1))) then 
                    x_3_preg <= x_3;
                end if; 
            end if;
        end if;
    end process;


    x_4_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_4_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_4_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_4_ap_vld = ap_const_logic_1))) then 
                    x_4_ap_vld_preg <= x_4_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_4_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_4_ap_vld = ap_const_logic_1))) then 
                    x_4_preg <= x_4;
                end if; 
            end if;
        end if;
    end process;


    x_5_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_5_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_5_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_5_ap_vld = ap_const_logic_1))) then 
                    x_5_ap_vld_preg <= x_5_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_5_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_5_ap_vld = ap_const_logic_1))) then 
                    x_5_preg <= x_5;
                end if; 
            end if;
        end if;
    end process;


    x_6_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_6_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_6_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_6_ap_vld = ap_const_logic_1))) then 
                    x_6_ap_vld_preg <= x_6_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_6_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_6_ap_vld = ap_const_logic_1))) then 
                    x_6_preg <= x_6;
                end if; 
            end if;
        end if;
    end process;


    x_7_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_7_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_7_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_7_ap_vld = ap_const_logic_1))) then 
                    x_7_ap_vld_preg <= x_7_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_7_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_7_ap_vld = ap_const_logic_1))) then 
                    x_7_preg <= x_7;
                end if; 
            end if;
        end if;
    end process;


    x_8_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_8_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_8_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_8_ap_vld = ap_const_logic_1))) then 
                    x_8_ap_vld_preg <= x_8_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_8_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_8_ap_vld = ap_const_logic_1))) then 
                    x_8_preg <= x_8;
                end if; 
            end if;
        end if;
    end process;


    x_9_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_9_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    x_9_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_9_ap_vld = ap_const_logic_1))) then 
                    x_9_ap_vld_preg <= x_9_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    x_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_9_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (x_9_ap_vld = ap_const_logic_1))) then 
                    x_9_preg <= x_9;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, x_0_ap_vld_in_sig, x_1_ap_vld_in_sig, x_2_ap_vld_in_sig, x_3_ap_vld_in_sig, x_4_ap_vld_in_sig, x_5_ap_vld_in_sig, x_6_ap_vld_in_sig, x_7_ap_vld_in_sig, x_8_ap_vld_in_sig, x_9_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((x_8_ap_vld_in_sig = ap_const_logic_0) or (x_7_ap_vld_in_sig = ap_const_logic_0) or (x_6_ap_vld_in_sig = ap_const_logic_0) or (x_5_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (x_4_ap_vld_in_sig = ap_const_logic_0) or (x_3_ap_vld_in_sig = ap_const_logic_0) or (x_2_ap_vld_in_sig = ap_const_logic_0) or (x_1_ap_vld_in_sig = ap_const_logic_0) or (x_0_ap_vld_in_sig = ap_const_logic_0) or (x_9_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_0 <= std_logic_vector(unsigned(shl_ln91_fu_258_p2) + unsigned(ap_const_lv16_3117));

    layer2_out_0_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_0_ap_vld <= ap_const_logic_1;
        else 
            layer2_out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_1 <= std_logic_vector(unsigned(shl_ln91_1_fu_271_p2) + unsigned(ap_const_lv16_78BC));

    layer2_out_1_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_1_ap_vld <= ap_const_logic_1;
        else 
            layer2_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_2 <= std_logic_vector(unsigned(shl_ln91_2_fu_284_p2) + unsigned(ap_const_lv16_150D));

    layer2_out_2_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_2_ap_vld <= ap_const_logic_1;
        else 
            layer2_out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_3 <= std_logic_vector(unsigned(shl_ln91_3_fu_297_p2) + unsigned(ap_const_lv16_F7A0));

    layer2_out_3_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_3_ap_vld <= ap_const_logic_1;
        else 
            layer2_out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_4 <= std_logic_vector(unsigned(shl_ln91_4_fu_310_p2) + unsigned(ap_const_lv16_F15D));

    layer2_out_4_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_4_ap_vld <= ap_const_logic_1;
        else 
            layer2_out_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_5 <= std_logic_vector(unsigned(shl_ln91_5_fu_323_p2) + unsigned(ap_const_lv16_80F9));

    layer2_out_5_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_5_ap_vld <= ap_const_logic_1;
        else 
            layer2_out_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_6 <= std_logic_vector(unsigned(shl_ln91_6_fu_336_p2) + unsigned(ap_const_lv16_C696));

    layer2_out_6_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_6_ap_vld <= ap_const_logic_1;
        else 
            layer2_out_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_7 <= std_logic_vector(unsigned(shl_ln91_7_fu_349_p2) + unsigned(ap_const_lv16_45B6));

    layer2_out_7_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_7_ap_vld <= ap_const_logic_1;
        else 
            layer2_out_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_8 <= std_logic_vector(unsigned(shl_ln91_8_fu_362_p2) + unsigned(ap_const_lv16_EA35));

    layer2_out_8_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_8_ap_vld <= ap_const_logic_1;
        else 
            layer2_out_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_out_9 <= std_logic_vector(unsigned(shl_ln91_9_fu_375_p2) + unsigned(ap_const_lv16_2BB5));

    layer2_out_9_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer2_out_9_ap_vld <= ap_const_logic_1;
        else 
            layer2_out_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln91_1_fu_271_p2 <= std_logic_vector(shift_left(unsigned(x_1_in_sig),to_integer(unsigned('0' & ap_const_lv16_6(16-1 downto 0)))));
    shl_ln91_2_fu_284_p2 <= std_logic_vector(shift_left(unsigned(x_2_in_sig),to_integer(unsigned('0' & ap_const_lv16_6(16-1 downto 0)))));
    shl_ln91_3_fu_297_p2 <= std_logic_vector(shift_left(unsigned(x_3_in_sig),to_integer(unsigned('0' & ap_const_lv16_6(16-1 downto 0)))));
    shl_ln91_4_fu_310_p2 <= std_logic_vector(shift_left(unsigned(x_4_in_sig),to_integer(unsigned('0' & ap_const_lv16_6(16-1 downto 0)))));
    shl_ln91_5_fu_323_p2 <= std_logic_vector(shift_left(unsigned(x_5_in_sig),to_integer(unsigned('0' & ap_const_lv16_6(16-1 downto 0)))));
    shl_ln91_6_fu_336_p2 <= std_logic_vector(shift_left(unsigned(x_6_in_sig),to_integer(unsigned('0' & ap_const_lv16_6(16-1 downto 0)))));
    shl_ln91_7_fu_349_p2 <= std_logic_vector(shift_left(unsigned(x_7_in_sig),to_integer(unsigned('0' & ap_const_lv16_6(16-1 downto 0)))));
    shl_ln91_8_fu_362_p2 <= std_logic_vector(shift_left(unsigned(x_8_in_sig),to_integer(unsigned('0' & ap_const_lv16_6(16-1 downto 0)))));
    shl_ln91_9_fu_375_p2 <= std_logic_vector(shift_left(unsigned(x_9_in_sig),to_integer(unsigned('0' & ap_const_lv16_6(16-1 downto 0)))));
    shl_ln91_fu_258_p2 <= std_logic_vector(shift_left(unsigned(x_0_in_sig),to_integer(unsigned('0' & ap_const_lv16_6(16-1 downto 0)))));

    x_0_ap_vld_in_sig_assign_proc : process(x_0_ap_vld, x_0_ap_vld_preg)
    begin
        if ((x_0_ap_vld = ap_const_logic_1)) then 
            x_0_ap_vld_in_sig <= x_0_ap_vld;
        else 
            x_0_ap_vld_in_sig <= x_0_ap_vld_preg;
        end if; 
    end process;


    x_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_0_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_0_blk_n <= x_0_ap_vld;
        else 
            x_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_0_in_sig_assign_proc : process(x_0, x_0_preg, x_0_ap_vld)
    begin
        if ((x_0_ap_vld = ap_const_logic_1)) then 
            x_0_in_sig <= x_0;
        else 
            x_0_in_sig <= x_0_preg;
        end if; 
    end process;


    x_1_ap_vld_in_sig_assign_proc : process(x_1_ap_vld, x_1_ap_vld_preg)
    begin
        if ((x_1_ap_vld = ap_const_logic_1)) then 
            x_1_ap_vld_in_sig <= x_1_ap_vld;
        else 
            x_1_ap_vld_in_sig <= x_1_ap_vld_preg;
        end if; 
    end process;


    x_1_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_1_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_1_blk_n <= x_1_ap_vld;
        else 
            x_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_1_in_sig_assign_proc : process(x_1, x_1_preg, x_1_ap_vld)
    begin
        if ((x_1_ap_vld = ap_const_logic_1)) then 
            x_1_in_sig <= x_1;
        else 
            x_1_in_sig <= x_1_preg;
        end if; 
    end process;


    x_2_ap_vld_in_sig_assign_proc : process(x_2_ap_vld, x_2_ap_vld_preg)
    begin
        if ((x_2_ap_vld = ap_const_logic_1)) then 
            x_2_ap_vld_in_sig <= x_2_ap_vld;
        else 
            x_2_ap_vld_in_sig <= x_2_ap_vld_preg;
        end if; 
    end process;


    x_2_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_2_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_2_blk_n <= x_2_ap_vld;
        else 
            x_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_2_in_sig_assign_proc : process(x_2, x_2_preg, x_2_ap_vld)
    begin
        if ((x_2_ap_vld = ap_const_logic_1)) then 
            x_2_in_sig <= x_2;
        else 
            x_2_in_sig <= x_2_preg;
        end if; 
    end process;


    x_3_ap_vld_in_sig_assign_proc : process(x_3_ap_vld, x_3_ap_vld_preg)
    begin
        if ((x_3_ap_vld = ap_const_logic_1)) then 
            x_3_ap_vld_in_sig <= x_3_ap_vld;
        else 
            x_3_ap_vld_in_sig <= x_3_ap_vld_preg;
        end if; 
    end process;


    x_3_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_3_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_3_blk_n <= x_3_ap_vld;
        else 
            x_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_3_in_sig_assign_proc : process(x_3, x_3_preg, x_3_ap_vld)
    begin
        if ((x_3_ap_vld = ap_const_logic_1)) then 
            x_3_in_sig <= x_3;
        else 
            x_3_in_sig <= x_3_preg;
        end if; 
    end process;


    x_4_ap_vld_in_sig_assign_proc : process(x_4_ap_vld, x_4_ap_vld_preg)
    begin
        if ((x_4_ap_vld = ap_const_logic_1)) then 
            x_4_ap_vld_in_sig <= x_4_ap_vld;
        else 
            x_4_ap_vld_in_sig <= x_4_ap_vld_preg;
        end if; 
    end process;


    x_4_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_4_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_4_blk_n <= x_4_ap_vld;
        else 
            x_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_4_in_sig_assign_proc : process(x_4, x_4_preg, x_4_ap_vld)
    begin
        if ((x_4_ap_vld = ap_const_logic_1)) then 
            x_4_in_sig <= x_4;
        else 
            x_4_in_sig <= x_4_preg;
        end if; 
    end process;


    x_5_ap_vld_in_sig_assign_proc : process(x_5_ap_vld, x_5_ap_vld_preg)
    begin
        if ((x_5_ap_vld = ap_const_logic_1)) then 
            x_5_ap_vld_in_sig <= x_5_ap_vld;
        else 
            x_5_ap_vld_in_sig <= x_5_ap_vld_preg;
        end if; 
    end process;


    x_5_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_5_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_5_blk_n <= x_5_ap_vld;
        else 
            x_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_5_in_sig_assign_proc : process(x_5, x_5_preg, x_5_ap_vld)
    begin
        if ((x_5_ap_vld = ap_const_logic_1)) then 
            x_5_in_sig <= x_5;
        else 
            x_5_in_sig <= x_5_preg;
        end if; 
    end process;


    x_6_ap_vld_in_sig_assign_proc : process(x_6_ap_vld, x_6_ap_vld_preg)
    begin
        if ((x_6_ap_vld = ap_const_logic_1)) then 
            x_6_ap_vld_in_sig <= x_6_ap_vld;
        else 
            x_6_ap_vld_in_sig <= x_6_ap_vld_preg;
        end if; 
    end process;


    x_6_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_6_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_6_blk_n <= x_6_ap_vld;
        else 
            x_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_6_in_sig_assign_proc : process(x_6, x_6_preg, x_6_ap_vld)
    begin
        if ((x_6_ap_vld = ap_const_logic_1)) then 
            x_6_in_sig <= x_6;
        else 
            x_6_in_sig <= x_6_preg;
        end if; 
    end process;


    x_7_ap_vld_in_sig_assign_proc : process(x_7_ap_vld, x_7_ap_vld_preg)
    begin
        if ((x_7_ap_vld = ap_const_logic_1)) then 
            x_7_ap_vld_in_sig <= x_7_ap_vld;
        else 
            x_7_ap_vld_in_sig <= x_7_ap_vld_preg;
        end if; 
    end process;


    x_7_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_7_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_7_blk_n <= x_7_ap_vld;
        else 
            x_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_7_in_sig_assign_proc : process(x_7, x_7_preg, x_7_ap_vld)
    begin
        if ((x_7_ap_vld = ap_const_logic_1)) then 
            x_7_in_sig <= x_7;
        else 
            x_7_in_sig <= x_7_preg;
        end if; 
    end process;


    x_8_ap_vld_in_sig_assign_proc : process(x_8_ap_vld, x_8_ap_vld_preg)
    begin
        if ((x_8_ap_vld = ap_const_logic_1)) then 
            x_8_ap_vld_in_sig <= x_8_ap_vld;
        else 
            x_8_ap_vld_in_sig <= x_8_ap_vld_preg;
        end if; 
    end process;


    x_8_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_8_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_8_blk_n <= x_8_ap_vld;
        else 
            x_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_8_in_sig_assign_proc : process(x_8, x_8_preg, x_8_ap_vld)
    begin
        if ((x_8_ap_vld = ap_const_logic_1)) then 
            x_8_in_sig <= x_8;
        else 
            x_8_in_sig <= x_8_preg;
        end if; 
    end process;


    x_9_ap_vld_in_sig_assign_proc : process(x_9_ap_vld, x_9_ap_vld_preg)
    begin
        if ((x_9_ap_vld = ap_const_logic_1)) then 
            x_9_ap_vld_in_sig <= x_9_ap_vld;
        else 
            x_9_ap_vld_in_sig <= x_9_ap_vld_preg;
        end if; 
    end process;


    x_9_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, x_9_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_9_blk_n <= x_9_ap_vld;
        else 
            x_9_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x_9_in_sig_assign_proc : process(x_9, x_9_preg, x_9_ap_vld)
    begin
        if ((x_9_ap_vld = ap_const_logic_1)) then 
            x_9_in_sig <= x_9;
        else 
            x_9_in_sig <= x_9_preg;
        end if; 
    end process;

end behav;
