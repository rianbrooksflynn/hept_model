// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject_myproject,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu13p-flga2577-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.785000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=171,HLS_SYN_LUT=592,HLS_VERSION=2023_2}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_0,
        x_0_ap_vld,
        x_1,
        x_1_ap_vld,
        x_2,
        x_2_ap_vld,
        x_3,
        x_3_ap_vld,
        x_4,
        x_4_ap_vld,
        x_5,
        x_5_ap_vld,
        x_6,
        x_6_ap_vld,
        x_7,
        x_7_ap_vld,
        x_8,
        x_8_ap_vld,
        x_9,
        x_9_ap_vld,
        x_10,
        x_10_ap_vld,
        x_11,
        x_11_ap_vld,
        x_12,
        x_12_ap_vld,
        x_13,
        x_13_ap_vld,
        x_14,
        x_14_ap_vld,
        x_15,
        x_15_ap_vld,
        x_16,
        x_16_ap_vld,
        x_17,
        x_17_ap_vld,
        x_18,
        x_18_ap_vld,
        x_19,
        x_19_ap_vld,
        x_20,
        x_20_ap_vld,
        x_21,
        x_21_ap_vld,
        x_22,
        x_22_ap_vld,
        x_23,
        x_23_ap_vld,
        x_24,
        x_24_ap_vld,
        x_25,
        x_25_ap_vld,
        x_26,
        x_26_ap_vld,
        x_27,
        x_27_ap_vld,
        x_28,
        x_28_ap_vld,
        x_29,
        x_29_ap_vld,
        x_30,
        x_30_ap_vld,
        x_31,
        x_31_ap_vld,
        layer2_out_0,
        layer2_out_0_ap_vld,
        layer2_out_1,
        layer2_out_1_ap_vld,
        layer2_out_2,
        layer2_out_2_ap_vld,
        layer2_out_3,
        layer2_out_3_ap_vld,
        layer2_out_4,
        layer2_out_4_ap_vld,
        layer2_out_5,
        layer2_out_5_ap_vld,
        layer2_out_6,
        layer2_out_6_ap_vld,
        layer2_out_7,
        layer2_out_7_ap_vld,
        layer2_out_8,
        layer2_out_8_ap_vld,
        layer2_out_9,
        layer2_out_9_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] x_0;
input   x_0_ap_vld;
input  [15:0] x_1;
input   x_1_ap_vld;
input  [15:0] x_2;
input   x_2_ap_vld;
input  [15:0] x_3;
input   x_3_ap_vld;
input  [15:0] x_4;
input   x_4_ap_vld;
input  [15:0] x_5;
input   x_5_ap_vld;
input  [15:0] x_6;
input   x_6_ap_vld;
input  [15:0] x_7;
input   x_7_ap_vld;
input  [15:0] x_8;
input   x_8_ap_vld;
input  [15:0] x_9;
input   x_9_ap_vld;
input  [15:0] x_10;
input   x_10_ap_vld;
input  [15:0] x_11;
input   x_11_ap_vld;
input  [15:0] x_12;
input   x_12_ap_vld;
input  [15:0] x_13;
input   x_13_ap_vld;
input  [15:0] x_14;
input   x_14_ap_vld;
input  [15:0] x_15;
input   x_15_ap_vld;
input  [15:0] x_16;
input   x_16_ap_vld;
input  [15:0] x_17;
input   x_17_ap_vld;
input  [15:0] x_18;
input   x_18_ap_vld;
input  [15:0] x_19;
input   x_19_ap_vld;
input  [15:0] x_20;
input   x_20_ap_vld;
input  [15:0] x_21;
input   x_21_ap_vld;
input  [15:0] x_22;
input   x_22_ap_vld;
input  [15:0] x_23;
input   x_23_ap_vld;
input  [15:0] x_24;
input   x_24_ap_vld;
input  [15:0] x_25;
input   x_25_ap_vld;
input  [15:0] x_26;
input   x_26_ap_vld;
input  [15:0] x_27;
input   x_27_ap_vld;
input  [15:0] x_28;
input   x_28_ap_vld;
input  [15:0] x_29;
input   x_29_ap_vld;
input  [15:0] x_30;
input   x_30_ap_vld;
input  [15:0] x_31;
input   x_31_ap_vld;
output  [15:0] layer2_out_0;
output   layer2_out_0_ap_vld;
output  [15:0] layer2_out_1;
output   layer2_out_1_ap_vld;
output  [15:0] layer2_out_2;
output   layer2_out_2_ap_vld;
output  [15:0] layer2_out_3;
output   layer2_out_3_ap_vld;
output  [15:0] layer2_out_4;
output   layer2_out_4_ap_vld;
output  [15:0] layer2_out_5;
output   layer2_out_5_ap_vld;
output  [15:0] layer2_out_6;
output   layer2_out_6_ap_vld;
output  [15:0] layer2_out_7;
output   layer2_out_7_ap_vld;
output  [15:0] layer2_out_8;
output   layer2_out_8_ap_vld;
output  [15:0] layer2_out_9;
output   layer2_out_9_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer2_out_0_ap_vld;
reg layer2_out_1_ap_vld;
reg layer2_out_2_ap_vld;
reg layer2_out_3_ap_vld;
reg layer2_out_4_ap_vld;
reg layer2_out_5_ap_vld;
reg layer2_out_6_ap_vld;
reg layer2_out_7_ap_vld;
reg layer2_out_8_ap_vld;
reg layer2_out_9_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] x_0_preg;
reg   [15:0] x_0_in_sig;
reg    x_0_ap_vld_preg;
reg    x_0_ap_vld_in_sig;
reg   [15:0] x_1_preg;
reg   [15:0] x_1_in_sig;
reg    x_1_ap_vld_preg;
reg    x_1_ap_vld_in_sig;
reg   [15:0] x_2_preg;
reg   [15:0] x_2_in_sig;
reg    x_2_ap_vld_preg;
reg    x_2_ap_vld_in_sig;
reg   [15:0] x_3_preg;
reg   [15:0] x_3_in_sig;
reg    x_3_ap_vld_preg;
reg    x_3_ap_vld_in_sig;
reg   [15:0] x_4_preg;
reg   [15:0] x_4_in_sig;
reg    x_4_ap_vld_preg;
reg    x_4_ap_vld_in_sig;
reg   [15:0] x_5_preg;
reg   [15:0] x_5_in_sig;
reg    x_5_ap_vld_preg;
reg    x_5_ap_vld_in_sig;
reg   [15:0] x_6_preg;
reg   [15:0] x_6_in_sig;
reg    x_6_ap_vld_preg;
reg    x_6_ap_vld_in_sig;
reg   [15:0] x_7_preg;
reg   [15:0] x_7_in_sig;
reg    x_7_ap_vld_preg;
reg    x_7_ap_vld_in_sig;
reg   [15:0] x_8_preg;
reg   [15:0] x_8_in_sig;
reg    x_8_ap_vld_preg;
reg    x_8_ap_vld_in_sig;
reg   [15:0] x_9_preg;
reg   [15:0] x_9_in_sig;
reg    x_9_ap_vld_preg;
reg    x_9_ap_vld_in_sig;
reg    x_0_blk_n;
reg    x_1_blk_n;
reg    x_2_blk_n;
reg    x_3_blk_n;
reg    x_4_blk_n;
reg    x_5_blk_n;
reg    x_6_blk_n;
reg    x_7_blk_n;
reg    x_8_blk_n;
reg    x_9_blk_n;
reg    ap_block_state1;
wire   [15:0] shl_ln91_fu_258_p2;
wire   [15:0] shl_ln91_1_fu_271_p2;
wire   [15:0] shl_ln91_2_fu_284_p2;
wire   [15:0] shl_ln91_3_fu_297_p2;
wire   [15:0] shl_ln91_4_fu_310_p2;
wire   [15:0] shl_ln91_5_fu_323_p2;
wire   [15:0] shl_ln91_6_fu_336_p2;
wire   [15:0] shl_ln91_7_fu_349_p2;
wire   [15:0] shl_ln91_8_fu_362_p2;
wire   [15:0] shl_ln91_9_fu_375_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 x_0_preg = 16'd0;
#0 x_0_ap_vld_preg = 1'b0;
#0 x_1_preg = 16'd0;
#0 x_1_ap_vld_preg = 1'b0;
#0 x_2_preg = 16'd0;
#0 x_2_ap_vld_preg = 1'b0;
#0 x_3_preg = 16'd0;
#0 x_3_ap_vld_preg = 1'b0;
#0 x_4_preg = 16'd0;
#0 x_4_ap_vld_preg = 1'b0;
#0 x_5_preg = 16'd0;
#0 x_5_ap_vld_preg = 1'b0;
#0 x_6_preg = 16'd0;
#0 x_6_ap_vld_preg = 1'b0;
#0 x_7_preg = 16'd0;
#0 x_7_ap_vld_preg = 1'b0;
#0 x_8_preg = 16'd0;
#0 x_8_ap_vld_preg = 1'b0;
#0 x_9_preg = 16'd0;
#0 x_9_ap_vld_preg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_0_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            x_0_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_0_ap_vld == 1'b1))) begin
            x_0_ap_vld_preg <= x_0_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_0_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_0_ap_vld == 1'b1))) begin
            x_0_preg <= x_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_1_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            x_1_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_1_ap_vld == 1'b1))) begin
            x_1_ap_vld_preg <= x_1_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_1_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_1_ap_vld == 1'b1))) begin
            x_1_preg <= x_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_2_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            x_2_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_2_ap_vld == 1'b1))) begin
            x_2_ap_vld_preg <= x_2_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_2_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_2_ap_vld == 1'b1))) begin
            x_2_preg <= x_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_3_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            x_3_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_3_ap_vld == 1'b1))) begin
            x_3_ap_vld_preg <= x_3_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_3_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_3_ap_vld == 1'b1))) begin
            x_3_preg <= x_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_4_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            x_4_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_4_ap_vld == 1'b1))) begin
            x_4_ap_vld_preg <= x_4_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_4_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_4_ap_vld == 1'b1))) begin
            x_4_preg <= x_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_5_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            x_5_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_5_ap_vld == 1'b1))) begin
            x_5_ap_vld_preg <= x_5_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_5_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_5_ap_vld == 1'b1))) begin
            x_5_preg <= x_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_6_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            x_6_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_6_ap_vld == 1'b1))) begin
            x_6_ap_vld_preg <= x_6_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_6_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_6_ap_vld == 1'b1))) begin
            x_6_preg <= x_6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_7_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            x_7_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_7_ap_vld == 1'b1))) begin
            x_7_ap_vld_preg <= x_7_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_7_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_7_ap_vld == 1'b1))) begin
            x_7_preg <= x_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_8_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            x_8_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_8_ap_vld == 1'b1))) begin
            x_8_ap_vld_preg <= x_8_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_8_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_8_ap_vld == 1'b1))) begin
            x_8_preg <= x_8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_9_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            x_9_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_9_ap_vld == 1'b1))) begin
            x_9_ap_vld_preg <= x_9_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        x_9_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (x_9_ap_vld == 1'b1))) begin
            x_9_preg <= x_9;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_0_ap_vld = 1'b1;
    end else begin
        layer2_out_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_1_ap_vld = 1'b1;
    end else begin
        layer2_out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_2_ap_vld = 1'b1;
    end else begin
        layer2_out_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_3_ap_vld = 1'b1;
    end else begin
        layer2_out_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_4_ap_vld = 1'b1;
    end else begin
        layer2_out_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_5_ap_vld = 1'b1;
    end else begin
        layer2_out_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_6_ap_vld = 1'b1;
    end else begin
        layer2_out_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_7_ap_vld = 1'b1;
    end else begin
        layer2_out_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_8_ap_vld = 1'b1;
    end else begin
        layer2_out_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        layer2_out_9_ap_vld = 1'b1;
    end else begin
        layer2_out_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((x_0_ap_vld == 1'b1)) begin
        x_0_ap_vld_in_sig = x_0_ap_vld;
    end else begin
        x_0_ap_vld_in_sig = x_0_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_blk_n = x_0_ap_vld;
    end else begin
        x_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_0_ap_vld == 1'b1)) begin
        x_0_in_sig = x_0;
    end else begin
        x_0_in_sig = x_0_preg;
    end
end

always @ (*) begin
    if ((x_1_ap_vld == 1'b1)) begin
        x_1_ap_vld_in_sig = x_1_ap_vld;
    end else begin
        x_1_ap_vld_in_sig = x_1_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_1_blk_n = x_1_ap_vld;
    end else begin
        x_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_1_ap_vld == 1'b1)) begin
        x_1_in_sig = x_1;
    end else begin
        x_1_in_sig = x_1_preg;
    end
end

always @ (*) begin
    if ((x_2_ap_vld == 1'b1)) begin
        x_2_ap_vld_in_sig = x_2_ap_vld;
    end else begin
        x_2_ap_vld_in_sig = x_2_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_2_blk_n = x_2_ap_vld;
    end else begin
        x_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_2_ap_vld == 1'b1)) begin
        x_2_in_sig = x_2;
    end else begin
        x_2_in_sig = x_2_preg;
    end
end

always @ (*) begin
    if ((x_3_ap_vld == 1'b1)) begin
        x_3_ap_vld_in_sig = x_3_ap_vld;
    end else begin
        x_3_ap_vld_in_sig = x_3_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_3_blk_n = x_3_ap_vld;
    end else begin
        x_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_3_ap_vld == 1'b1)) begin
        x_3_in_sig = x_3;
    end else begin
        x_3_in_sig = x_3_preg;
    end
end

always @ (*) begin
    if ((x_4_ap_vld == 1'b1)) begin
        x_4_ap_vld_in_sig = x_4_ap_vld;
    end else begin
        x_4_ap_vld_in_sig = x_4_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_4_blk_n = x_4_ap_vld;
    end else begin
        x_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_4_ap_vld == 1'b1)) begin
        x_4_in_sig = x_4;
    end else begin
        x_4_in_sig = x_4_preg;
    end
end

always @ (*) begin
    if ((x_5_ap_vld == 1'b1)) begin
        x_5_ap_vld_in_sig = x_5_ap_vld;
    end else begin
        x_5_ap_vld_in_sig = x_5_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_5_blk_n = x_5_ap_vld;
    end else begin
        x_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_5_ap_vld == 1'b1)) begin
        x_5_in_sig = x_5;
    end else begin
        x_5_in_sig = x_5_preg;
    end
end

always @ (*) begin
    if ((x_6_ap_vld == 1'b1)) begin
        x_6_ap_vld_in_sig = x_6_ap_vld;
    end else begin
        x_6_ap_vld_in_sig = x_6_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_6_blk_n = x_6_ap_vld;
    end else begin
        x_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_6_ap_vld == 1'b1)) begin
        x_6_in_sig = x_6;
    end else begin
        x_6_in_sig = x_6_preg;
    end
end

always @ (*) begin
    if ((x_7_ap_vld == 1'b1)) begin
        x_7_ap_vld_in_sig = x_7_ap_vld;
    end else begin
        x_7_ap_vld_in_sig = x_7_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_7_blk_n = x_7_ap_vld;
    end else begin
        x_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_7_ap_vld == 1'b1)) begin
        x_7_in_sig = x_7;
    end else begin
        x_7_in_sig = x_7_preg;
    end
end

always @ (*) begin
    if ((x_8_ap_vld == 1'b1)) begin
        x_8_ap_vld_in_sig = x_8_ap_vld;
    end else begin
        x_8_ap_vld_in_sig = x_8_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_8_blk_n = x_8_ap_vld;
    end else begin
        x_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_8_ap_vld == 1'b1)) begin
        x_8_in_sig = x_8;
    end else begin
        x_8_in_sig = x_8_preg;
    end
end

always @ (*) begin
    if ((x_9_ap_vld == 1'b1)) begin
        x_9_ap_vld_in_sig = x_9_ap_vld;
    end else begin
        x_9_ap_vld_in_sig = x_9_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_9_blk_n = x_9_ap_vld;
    end else begin
        x_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((x_9_ap_vld == 1'b1)) begin
        x_9_in_sig = x_9;
    end else begin
        x_9_in_sig = x_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((x_8_ap_vld_in_sig == 1'b0) | (x_7_ap_vld_in_sig == 1'b0) | (x_6_ap_vld_in_sig == 1'b0) | (x_5_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0) | (x_4_ap_vld_in_sig == 1'b0) | (x_3_ap_vld_in_sig == 1'b0) | (x_2_ap_vld_in_sig == 1'b0) | (x_1_ap_vld_in_sig == 1'b0) | (x_0_ap_vld_in_sig == 1'b0) | (x_9_ap_vld_in_sig == 1'b0));
end

assign layer2_out_0 = (shl_ln91_fu_258_p2 + 16'd12567);

assign layer2_out_1 = (shl_ln91_1_fu_271_p2 + 16'd30908);

assign layer2_out_2 = (shl_ln91_2_fu_284_p2 + 16'd5389);

assign layer2_out_3 = ($signed(shl_ln91_3_fu_297_p2) + $signed(16'd63392));

assign layer2_out_4 = ($signed(shl_ln91_4_fu_310_p2) + $signed(16'd61789));

assign layer2_out_5 = ($signed(shl_ln91_5_fu_323_p2) + $signed(16'd33017));

assign layer2_out_6 = ($signed(shl_ln91_6_fu_336_p2) + $signed(16'd50838));

assign layer2_out_7 = (shl_ln91_7_fu_349_p2 + 16'd17846);

assign layer2_out_8 = ($signed(shl_ln91_8_fu_362_p2) + $signed(16'd59957));

assign layer2_out_9 = (shl_ln91_9_fu_375_p2 + 16'd11189);

assign shl_ln91_1_fu_271_p2 = x_1_in_sig << 16'd6;

assign shl_ln91_2_fu_284_p2 = x_2_in_sig << 16'd6;

assign shl_ln91_3_fu_297_p2 = x_3_in_sig << 16'd6;

assign shl_ln91_4_fu_310_p2 = x_4_in_sig << 16'd6;

assign shl_ln91_5_fu_323_p2 = x_5_in_sig << 16'd6;

assign shl_ln91_6_fu_336_p2 = x_6_in_sig << 16'd6;

assign shl_ln91_7_fu_349_p2 = x_7_in_sig << 16'd6;

assign shl_ln91_8_fu_362_p2 = x_8_in_sig << 16'd6;

assign shl_ln91_9_fu_375_p2 = x_9_in_sig << 16'd6;

assign shl_ln91_fu_258_p2 = x_0_in_sig << 16'd6;

endmodule //myproject
